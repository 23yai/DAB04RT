# pages/06_Clustering.py
import streamlit as st
import pandas as pd
import plotly.express as px

def page_clustering():
    st.title("üìä Exploraci√≥n y Filtrado de Clusters")
    st.markdown(
        "En esta p√°gina puedes filtrar las ofertas seg√∫n las variables usadas "
        "para el clustering y ver c√≥mo se distribuyen los diferentes grupos.\n\n" 
        "Agrupa las ofertas en clusters basados en 7 variables clave:\n\n"
    "‚Ä¢ Estudios\n\n"
    "‚Ä¢ Experiencia\n\n"
    "‚Ä¢ N√∫mero de skills\n\n"
    "‚Ä¢ Tecnolog√≠as/apts\n\n"
    "‚Ä¢ Vacaciones\n\n"
    "‚Ä¢ Beneficios\n\n"
    "‚Ä¢ Salario medio\n\n"
    "Se incorpora un formulario con inputs para las siete variables de una nueva oferta en el lateral izquierdo de la p√°gina. Al pulsar ‚ÄúClasificar‚Äù, se escala el vector de entrada y se predice su cluster asociado usando los centroides del modelo de clustering. De esta forma, se demuestra c√≥mo el sistema puede preetiquetar nuevas ofertas en tiempo real."

    )

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 1Ô∏è‚É£ Carga de datos
    @st.cache_data
    def load_data():
        df = pd.read_csv("df_subconjunto_cluster.csv")
        # Aseguramos nombres sencillos
        df.columns = df.columns.str.lower().str.replace(" ", "_")
        return df

    df = load_data()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 2Ô∏è‚É£ Panel de Filtros en la barra lateral
    st.sidebar.header("üîé Filtros de Clustering")


    estudios_opt = st.sidebar.selectbox(
        "Requiere estudios:",
        options=["Ambos", "S√≠", "No"]
    )

    exp_min, exp_max = st.sidebar.slider(
        "Experiencia (a√±os):",
        int(df.experiencia.min()), int(df.experiencia.max()),
        (int(df.experiencia.min()), int(df.experiencia.max()))
    )

    skills_min, skills_max = st.sidebar.slider(
        "N√∫mero de skills:",
        int(df.skills.min()), int(df.skills.max()),
        (int(df.skills.min()), int(df.skills.max()))
    )

    tech_min, tech_max = st.sidebar.slider(
        "Tecnolog√≠as/Aptitudes:",
        int(df.tecnologias_aptitudes.min()), int(df.tecnologias_aptitudes.max()),
        (int(df.tecnologias_aptitudes.min()), int(df.tecnologias_aptitudes.max()))
    )

    vac_min, vac_max = st.sidebar.slider(
        "Vacaciones (d√≠as):",
        int(df.vacaciones.min()), int(df.vacaciones.max()),
        (int(df.vacaciones.min()), int(df.vacaciones.max()))
    )

    ben_min, ben_max = st.sidebar.slider(
        "Beneficios (#):",
        int(df.beneficios.min()), int(df.beneficios.max()),
        (int(df.beneficios.min()), int(df.beneficios.max()))
    )

    sal_min, sal_max = st.sidebar.slider(
        "Salario medio (‚Ç¨):",
        float(df.salario_medio.min()), float(df.salario_medio.max()),
        (float(df.salario_medio.min()), float(df.salario_medio.max()
        ))
    )

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 3Ô∏è‚É£ Aplicaci√≥n de filtros
    dff = df.copy()
    if estudios_opt != "Ambos":
        dff = dff[dff.estudios == (1 if estudios_opt == "S√≠" else 0)]

    dff = dff[
        (dff.experiencia.between(exp_min, exp_max)) &
        (dff.skills.between(skills_min, skills_max)) &
        (dff.tecnologias_aptitudes.between(tech_min, tech_max)) &
        (dff.vacaciones.between(vac_min, vac_max)) &
        (dff.beneficios.between(ben_min, ben_max)) &
        (dff.salario_medio.between(sal_min, sal_max))
    ]

    st.sidebar.markdown(f"**Ofertas tras filtro:** {len(dff)} registros")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 4Ô∏è‚É£ Distribuci√≥n de Clusters
    st.subheader("üìà Distribuci√≥n de Clusters")
    fig_count = px.histogram(
        dff,
        x="cluster",
        color="cluster",
        title="N√∫mero de Ofertas por Cluster",
        labels={"cluster": "Cluster", "count": "Ofertas"}
    )
    st.plotly_chart(fig_count, use_container_width=True)
    st.markdown(
        "Se presenta un histograma que muestra cu√°ntas ofertas pertenecen a cada cluster. El eje X representa los distintos grupos generados por el modelo de clustering y el eje Y indica el recuento de ofertas en cada uno. Esta visualizaci√≥n permite: Evaluar la tama√±o relativo de cada cluster, detectar desequilibrios (clusters con muy pocas o muchas ofertas) e identificar si es necesario ajustar el n√∫mero de clusters o revisar las variables de entrada para lograr una segmentaci√≥n m√°s equilibrada."
    )

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 5Ô∏è‚É£ Parallel Coordinates para todas las variables
    st.subheader("üîÄ Parallel Coordinates")
    vars_para = [
        "experiencia", "skills", "tecnologias_aptitudes",
        "vacaciones", "beneficios", "salario_medio"
    ]
    fig_par = px.parallel_coordinates(
        dff,
        color="cluster",
        dimensions=vars_para,
        color_continuous_scale=px.colors.diverging.Tealrose,
        color_continuous_midpoint=dff.cluster.mean(),
        labels={
            "experiencia": "A√±os Exp.",
            "skills": "Skills",
            "tecnologias_aptitudes": "Tec/Apt",
            "vacaciones": "Vacaciones",
            "beneficios": "Beneficios",
            "salario_medio": "Salario (‚Ç¨)"
        },
        title="Visualizaci√≥n multidimensional de variables por Cluster"
    )
    st.plotly_chart(fig_par, use_container_width=True, height=600)
    st.markdown(
        "Se trazan l√≠neas paralelas, una por cada oferta, que interceptan un eje para cada variable.Al colorearlas seg√∫n el cluster, se observa c√≥mo los grupos tienden a ocupar regiones espec√≠ficas en cada dimensi√≥n. Esta vista multivariada resulta id√≥nea para detectar patrones conjuntos ‚Äîpor ejemplo, la combinaci√≥n de salarios altos con bajas exigencias de experiencia."
    )

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 6Ô∏è‚É£ Scatter Matrix (muestra muestra)
    st.subheader("üîç Matriz de Dispersi√≥n (muestra aleatoria)")
    # para rendimiento, muestreamos 500 puntos
    sample = dff.sample(500, random_state=42) if len(dff) > 500 else dff
    fig_smat = px.scatter_matrix(
        sample,
        dimensions=vars_para,
        color="cluster",
        title="Scatter Matrix de Variables Clustering",
        labels={var: var.title() for var in vars_para}
    )
    st.plotly_chart(fig_smat, use_container_width=True, height=800)
    st.markdown(
        "Se construye una cuadr√≠cula de gr√°ficos de dispersi√≥n que compara cada par de variables, coloreando los puntos por cluster. Para optimizar el rendimiento, se muestra una muestra aleatoria de hasta 500 ofertas. Este an√°lisis bivariado permite identificar correlaciones directas o inversas y zonas de solapamiento entre grupos."
    )

########nuevas visualizaciones
#An√°lisis de Centroides (Heatmap)
#Muestra la media de cada variable por cluster como un mapa de calor, para ver de un vistazo qu√© distingue a cada grupo.

    with st.expander("üó∫Ô∏è Heatmap de Centroides"):
        centroids = (
            dff
            .groupby("cluster")[vars_para]
            .mean()
            .round(2)
        )
        fig = px.imshow(
            centroids,
            text_auto=True,
            color_continuous_scale="Viridis",
            title="Centroides promedio por Cluster",
            labels={"x":"Variable", "y":"Cluster", "color":"Valor medio"}
        )
        st.plotly_chart(fig, use_container_width=True, height=400)
        st.markdown(
        "Se emplea un mapa de calor para representar el valor medio de cada variable en cada cluster. Cada fila corresponde a un cluster y cada columna a una variable de entrada (estudios, experiencia, skills, tecnolog√≠as/apts, vacaciones, beneficios, salario medio). Los colores indican la magnitud promedio, de modo que resulta inmediato identificar qu√© caracter√≠sticas distinguen un cluster de otro."
    )



########nuevas visualizaciones
#Box & Violin Plots por Variable
#Para cada variable, un boxplot o violin que compare su distribuci√≥n entre clusters.
#Puedes copiar ese patr√≥n para todas las variables (experiencia, skills, ‚Ä¶).

    tab1, tab2 = st.tabs(["üé® Boxplot", "üéª Violin"])
    for name, func in zip(["Boxplot", "Violin"], [px.box, px.violin]):
        with st.container():
            st.subheader(name + " de Salario Medio")
            fig = func(
                dff,
                x="cluster",
                y="salario_medio",
                color="cluster",
                points="all" if name=="Violin" else False,
                title=f"{name} de Salario Medio por Cluster",
                labels={"cluster":"Cluster","salario_medio":"Salario (‚Ç¨)"}
            )
            st.plotly_chart(fig, use_container_width=True)
            st.markdown(
            "Se utilizan diagramas de caja (boxplot) y de viol√≠n (violin plot) para comparar la distribuci√≥n de cada variable entre clusters. En el boxplot se muestran mediana, cuartiles y posibles valores at√≠picos; en el violin plot, adem√°s, se visualiza la densidad de puntos. Estas gr√°ficas permiten determinar si existen diferencias significativas en, por ejemplo, salario o experiencia entre los grupos."
         )

########nuevas visualizaciones
#PCA 2D / t-SNE
#Proyecta tu espacio 7-D en 2-D para ver la separaci√≥n real de clusters. Requiere sklearn.

    from sklearn.decomposition import PCA
    from sklearn.manifold import TSNE

    X = dff[vars_para]

    # ‚ñ∂ PCA
    pca2 = PCA(n_components=2).fit_transform(X)
    df_pca = pd.DataFrame(pca2, columns=["PC1","PC2"])
    df_pca["cluster"] = dff["cluster"].astype(str)

    # ‚ñ∂ Plot
    st.subheader("üîç PCA 2D")
    fig = px.scatter(
        df_pca, x="PC1", y="PC2", color="cluster",
        title="PCA 2D de Variables de Clustering",
        labels={"PC1":"Componente 1","PC2":"Componente 2"}
    )
    st.plotly_chart(fig, use_container_width=True)
    st.markdown(
            "Se aplica An√°lisis de Componentes Principales (PCA) para proyectar las siete dimensiones originales en dos componentes ortogonales que retienen la mayor varianza. El diagrama de dispersi√≥n resultante coloreado por cluster facilita la evaluaci√≥n de la separaci√≥n o solapamiento de los grupos en un espacio bidimensional reducido."
         )

########nuevas visualizaciones
    #Radar Chart de Un Cluster
    #Para analizar un solo cluster en detalle, un radar chart de sus medias:
    import plotly.graph_objects as go

    with st.expander("üì° Radar Chart por Cluster"):
        sel = st.selectbox("Escoge Cluster", sorted(dff.cluster.unique()))
        cent = centroids.loc[sel, :]
        fig = go.Figure(data=go.Scatterpolar(
            r=cent.values,
            theta=vars_para,
            fill='toself',
            name=f"Cluster {sel}"
        ))
        fig.update_layout(
            polar=dict(radialaxis=dict(visible=True)),
            title=f"Perfil Radar del Cluster {sel}"
        )
        st.plotly_chart(fig, use_container_width=True)
        st.markdown(
            "Se genera un gr√°fico polar (radar) para un cluster seleccionado, en el que cada ‚Äúbrazo‚Äù representa una de las variables continuas. La forma resultante ilustra el perfil promedio del grupo, mostrando de manera sint√©tica en qu√© dimensiones destaca o queda rezagado."
         )



########nuevas visualizaciones
#silhouette Plot
#Para medir la calidad de tu clustering, un silhouette plot:

    from sklearn.metrics import silhouette_samples
    import numpy as np

    with st.expander("üìè Silhouette Score"):
        sil_vals = silhouette_samples(X, dff["cluster"])
        df_sil = dff.copy()
        df_sil["silhouette"] = sil_vals
        fig = px.box(
            df_sil, x="cluster", y="silhouette", color="cluster",
            title="Silhouette Score por Cluster",
            labels={"silhouette":"Silhouette","cluster":"Cluster"}
        )
        st.plotly_chart(fig, use_container_width=True)
        st.write(f"Silhouette medio: {sil_vals.mean():.2f}")
        st.markdown(
            "Se calcula el coeficiente de silueta para cada punto y se visualiza en un boxplot por cluster. Este indicador cuantifica la coherencia interna de los grupos (valores cercanos a 1 indican buena asignaci√≥n). La silueta media global se muestra como referencia de calidad del clustering."
         )







    
